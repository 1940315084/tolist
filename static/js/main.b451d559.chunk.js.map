{"version":3,"sources":["redux/ActionTypes.js","redux/Reducer.js","redux/Store.js","redux/ActionCreator.js","views/Todo.js","views/AddTodo.js","views/Done.js","App.js","serviceWorker.js","index.js"],"names":["ADD_TODO","TOGGLE_COMPLETE","CHANGE_DISPLAY","DELETE","initState","display","todos","id","parseInt","Math","random","isComplete","title","reducer","newState","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","payload","map","item","console","log","filter","store","createStore","actions","addTo","toggleComplete","changeDisplay","deletes","Todo","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","todoChange","event","target","value","deletee","getAttribute","i","_this2","todo","index","react_default","a","createElement","key","className","checked","onChange","data-id","onClick","getUnfinishedCount","getTodos","Component","connect","objectSpread","AddTodo","input","e","setState","handleInput","handleClick","React","Done","delete","App","es","src_views_AddTodo","src_views_Todo","views_Done","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b451d559.chunk.js","sourcesContent":["//添加待办事项\r\nexport const ADD_TODO = 'ADD_TODO';\r\n\r\n//更改待办项的完成状态\r\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE';\r\n//更改显示待办项的状态\r\nexport const CHANGE_DISPLAY = 'CHANGE_DISPLAY';\r\n\r\n//删除事项\r\nexport const DELETE ='DELETE';\r\n\r\n","// import * as ActionTypes from './ActionTypes.js';\r\nimport {ADD_TODO} from './ActionTypes.js';\r\nimport {TOGGLE_COMPLETE} from './ActionTypes.js';\r\nimport {CHANGE_DISPLAY} from './ActionTypes.js';\r\nimport {DELETE} from './ActionTypes.js';\r\n//定义默认状态\r\nlet initState = {\r\n  display:'all', \r\n  todos: [\r\n    {\r\n      id: parseInt(Math.random() * 10000000),\r\n      isComplete: false,\r\n      title: 'ddd'\r\n    }\r\n  ]\r\n};\r\nfunction reducer(state=initState,action){\r\n  let newState;\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      newState = {\r\n        todos: [\r\n          ...state.todos,\r\n          action.payload\r\n        ]\r\n      };\r\n      break;\r\n    case TOGGLE_COMPLETE:\r\n      newState = {\r\n        //循环每一条待办，把要修改的记录更新\r\n        todos: state.todos.map(item => {\r\n          if (item.id == action.payload) {\r\n            item.isComplete = !item.isComplete;\r\n          }\r\n          return item;\r\n        })\r\n      };\r\n      break;\r\n    case CHANGE_DISPLAY:\r\n      newState = {\r\n        display: action.payload,\r\n        todos: [...state.todos]\r\n      };\r\n      break;\r\n    case DELETE: \r\n      console.log('action.id',action.payload);\r\n      console.log(state.todos);\r\n      // state.todos.splice(state.todos.findIndex(item => item.id === action.payload), 1)\r\n      newState = {\r\n        //循环每一条待办，把要修改的记录更新\r\n          todos: state.todos.filter(item => {\r\n              if (item.id != action.payload) {\r\n                return item;\r\n              }\r\n          })\r\n      };\r\n    break;\r\n    default:\r\n      newState = state;\r\n      break;\r\n  }\r\n  return newState;\r\n}\r\nexport default reducer;","import {createStore} from 'redux';\r\nimport reducer from './Reducer.js';\r\n\r\nconst store = createStore(reducer);  \r\nexport default store;","import {ADD_TODO} from './ActionTypes.js';\r\nimport {TOGGLE_COMPLETE} from './ActionTypes.js';\r\nimport {CHANGE_DISPLAY} from './ActionTypes.js';\r\nimport {DELETE} from './ActionTypes.js';\r\nlet actions = {\r\n  //添加待办事项\r\n  addTo: function(payload) {\r\n    return {type: ADD_TODO, payload};\r\n  },\r\n  //更改完成状态，此处payload传id\r\n  toggleComplete: function(payload) {\r\n    return {type: TOGGLE_COMPLETE, payload};\r\n  },\r\n  //更改显示待办项的状态，\r\n  //payload为以下3个值（all,uncompleted,completed）\r\n  changeDisplay: function(payload) {\r\n    return {type: CHANGE_DISPLAY, payload};\r\n  },\r\n  deletes: function(payload) {\r\n    return {type: DELETE, payload};\r\n  }\r\n};\r\n\r\nexport default actions;//导出ActionCreatorss","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n//引入actionCreators\r\nimport actions from '../redux/ActionCreator.js';\r\nimport './Todo.css';\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n     //按display条件过滤数据\r\n    // filterDisplay() {\r\n    //     return this.props.todos.filter(item => {\r\n    //         switch (this.props.display) {\r\n    //         case 'completed':\r\n    //             return item.isComplete;\r\n    //         case 'uncompleted':\r\n    //             return !item.isComplete;\r\n    //         case 'all':\r\n    //         default:\r\n    //             return true;\r\n    //     }\r\n    // });\r\n    // }\r\n    todoChange = (event) => {\r\n        //当onChange事件发生时，调用toggleComplete动作\r\n        this.props.toggleComplete(event.target.value);\r\n    }\r\n    //取得未完成的todo数量\r\n    getUnfinishedCount() {\r\n        //this.props.todos就是从connect传入的state数据\r\n        console.log(this.props.todos);\r\n        return this.props.todos.filter((i) => {\r\n        return i.isComplete === false;\r\n        }).length;\r\n    }\r\n    deletee = (event) => {\r\n        // console.log(event.target.getAttribute(\"data-id\"))\r\n        this.props.deletes(event.target.getAttribute(\"data-id\"));\r\n    }\r\n    getTodos() {\r\n        return this.props.todos.map((todo, index) => {\r\n            if(todo.isComplete == false) {\r\n                return (<li key={index} className='ulli'>\r\n                    <input type=\"checkbox\" value={todo.id} checked={todo.isComplete} onChange={this.todoChange}/> \r\n                        <span>{todo.title}</span>\r\n                    <button type=\"button\" data-id={todo.id} onClick={this.deletee}>删除</button>\r\n                  </li>)\r\n            }\r\n        });\r\n      }\r\n      render() {\r\n        return (<div className='ising'>\r\n            <h3>正在进行<span className='ingspan'>{this.getUnfinishedCount()}</span></h3>\r\n          <ul className='ullist'>\r\n            {this.getTodos()}\r\n          </ul>\r\n        </div>);\r\n      }\r\n}\r\nexport default connect((state) => ({\r\n    ...state\r\n  }),actions)(Todo);\r\n// export default Todo;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {connect} from 'react-redux';\r\n//引入actionCreators\r\nimport actions from '../redux/ActionCreator.js';\r\nimport './AddTodo.css';\r\nclass AddTodo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: ''\r\n        }\r\n    }\r\n    handleInput(e) {\r\n        this.setState({\r\n            input: e.target.value\r\n        })\r\n    }\r\n    handleClick(e) {\r\n        // console.log(this.props.addTo)\r\n        this.props.addTo({\r\n            id: parseInt(Math.random() * 10000000),\r\n            isComplete: false,\r\n            title: this.state.input\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='input-box'>\r\n              <input onChange={(e)=>this.handleInput(e)}></input><button onClick={(e)=>this.handleClick(e)}>确认</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect((state) => ({\r\n    ...state\r\n  }),actions)(AddTodo);\r\n//   export default AddTodo;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {connect} from 'react-redux';\r\n//引入actionCreators\r\nimport actions from '../redux/ActionCreator.js';\r\n// import './Done.css'\r\nclass Done extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n     //按display条件过滤数据\r\n    // filterDisplay() {\r\n    //     return this.props.todos.filter(item => {\r\n    //         switch (this.propsdisplay) {\r\n    //             case 'completed':\r\n    //                 return item.isComplete;\r\n    //             case 'uncompleted':\r\n    //                 return !item.isComplete;\r\n    //             case 'all':\r\n    //             default:\r\n    //                 return true;\r\n    //     }\r\n    // });\r\n    // }\r\n    todoChange = (event) => {\r\n        //当onChange事件发生时，调用toggleComplete动作\r\n        this.props.toggleComplete(event.target.value);\r\n    }\r\n    //取得已经完成的todo数量\r\n    getUnfinishedCount() {\r\n        //this.props.todos就是从connect传入的state数据\r\n        // console.log(this.props.todos);\r\n        return this.props.todos.filter((i) => {\r\n            return i.isComplete === true;\r\n            }).length;\r\n    }\r\n    delete = (event) => {\r\n        // console.log(event.target.getAttribute(\"data-id\"))\r\n        this.props.deletes(event.target.getAttribute(\"data-id\"))\r\n    }\r\n    getTodos() {\r\n        return this.props.todos.map((todo, index) => {\r\n            if(todo.isComplete == true) {\r\n                return (<li key={index} className='ulli'>\r\n                    <input type=\"checkbox\" value={todo.id} checked={todo.isComplete} onChange={this.todoChange}/> \r\n                        <del>{todo.title}</del>\r\n                    <button type=\"button\" data-id={todo.id} onClick={this.delete}>删除</button>\r\n                  </li>)\r\n            }\r\n        });\r\n      }\r\n      render() {\r\n        return (<div className='ising'>\r\n            <h3>已经完成<span className='ingspan'>{this.getUnfinishedCount()}</span></h3>\r\n          <ul className='ullist'>\r\n            {this.getTodos()}\r\n          </ul>\r\n        </div>);\r\n      }\r\n}\r\nexport default connect((state) => ({\r\n    ...state\r\n  }),actions)(Done);\r\n// export default Todo;","import React, { Component } from 'react';\nimport {Provider} from 'react-redux';\nimport './App.css';\nimport store from './redux/Store.js';\nimport Todo from './views/Todo.js';\nimport AddTodo from './views/AddTodo.js';\nimport Done from './views/Done.js';\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n        <div className='box'>\n          <Provider store={store}>\n            <AddTodo></AddTodo>\n            <Todo></Todo>\n            <Done></Done>\n          </Provider>\n        </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}